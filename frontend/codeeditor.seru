from webidl`github.com/serulian/virtualdom` import Element, Node

from "github.com/serulian/virtualdom" import Div, Context

from webidl`ace` import ace, aceEditor, aceMode

/**
 * codeEditorProps defines the properties for the code editor.
 */
class codeEditorProps {
	/**
	 * IsReadOnly sets whether the code editor is currently in a read-only state.
	 */
	var IsReadOnly bool

	/**
	 * OnChanged is the callback to invoke when the contents of the editor have changed.
	 */
	var OnChanged function<void>(string)?

	/**
	 * The edit mode for the ACE editor.
	 */
	var Mode aceMode?

	/**
	 * Theme is the ACE theme to use. If none specified, the dark theme will be used.
	 */
	var Theme string?
}

/**
 * CodeEditor wraps an ACE code editor into a Serulian component.
 */
class CodeEditor {
	var props codeEditorProps
	var element Element?
	var editor aceEditor?
	var initialValue string?

	constructor Declare(props codeEditorProps, initialValue string?) {
		return CodeEditor{props: props, initialValue: initialValue}
	}

	function Attached(node Node) {
		this.element = node.(Element)

		var editor = ace.edit(this.element!)
		editor.setTheme(`ace/theme/${this.props.Theme ?? "monokai"}`)

		initialValue := this.initialValue?.Trim() ?? ''
		editor.getSession().setValue(&initialValue)

		if this.props.Mode is not null {
			editor.getSession().setMode(this.props.Mode!)
		}

		// Listen for any changes to the code in the editor, and raise the onChanged
		// callback.
		editor.getSession().on('change', function(e any) {
			onChanged := this.props.OnChanged
			if onChanged is not null {
				onChanged(string(editor.getSession().getValue()))
			}
		})

		this.editor = editor
		this.editor?.setReadOnly(this.props.IsReadOnly)
	}

	property Props any {
		get { return this.props }
	}

	function PropsUpdated(props any) {
		this.props = props.(codeEditorProps)
		this.editor?.setReadOnly(this.props.IsReadOnly)
		this.editor?.setTheme(`ace/theme/${this.props.Theme ?? "monokai"}`)

		if this.props.Mode is not null {
			this.editor?.getSession()?.setMode(this.props.Mode!)
		}
	}

	function Render(context Context) any {
		return <Div className="editor" />
	}
}
